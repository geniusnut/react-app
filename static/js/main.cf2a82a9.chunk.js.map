{"version":3,"sources":["gen/conversation_pb.js","gen/im_pb.js","gen/msg_pb.js","gen/auxiliary_pb.js","Controllers/IMController.js","Constants.js","Stores/ChatStore.js","Stores/ApplicationStore.js","Stores/FileStore.js","Components/Tile/ChatTile.js","Utils/Chat.js","Components/Tile/DialogTitle.js","Components/Tile/DialogMeta.js","Components/Tile/DialogContent.js","Components/Tile/DialogBadge.js","Components/Tile/Dialog.js","Actions/Client.js","Components/Tile/DialogsList.js","Components/Tile/Dialogs.js","Components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["jspb","require","goog","global","Function","exportSymbol","proto","IMNut","MemNick","opt_data","Message","initialize","this","inherits","DEBUG","COMPILED","displayName","Conversation","repeatedFields_","ConversationList","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","obj","cid","getFieldWithDefault","nick","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","value","readString","setCid","setNick","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","undefined","getCid","length","writeString","getNick","setProto3StringField","id","name","type","cidsList","getRepeatedField","creator","version","membersList","nicksList","toObjectList","getNicksList","setId","setName","readEnum","setType","addCids","setCreator","readInt32","setVersion","addMembers","readMessage","addNicks","getId","getName","getType","writeEnum","getCidsList","writeRepeatedString","getCreator","getVersion","writeInt32","getMembersList","writeRepeatedMessage","setProto3EnumField","setCidsList","setField","opt_index","addToRepeatedField","clearCidsList","setProto3IntField","setMembersList","clearMembersList","getRepeatedWrapperField","setNicksList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearNicksList","limit","convsList","getConvsList","setLimit","addConvs","getLimit","setConvsList","clearConvsList","ConversationType","SINGLE","MULTIPLE","SYS","object","extend","exports","msg_pb","conversation_pb","NatsMsg","IMAck","IMRequest","IMResponse","OpResult","TgtMsgPush","TgtPeerState","MessageQuery","TgtGroupMemberAdded","TgtGroupMemberRemoved","operation","blob","getBlob_asB64","setOperation","readBytes","setBlob","getOperation","getBlob_asU8","writeBytes","getBlob","bytesAsB64","bytesAsU8","setProto3BytesField","conversation","getConversation","getMsg","Msg","ts","setConversation","setMsg","readInt64","setTs","writeMessage","getTs","writeInt64","getWrapperField","setWrapperField","clearConversation","hasConversation","getField","clearMsg","hasMsg","code","setCode","getCode","c","setC","getC","login","readBool","setLogin","getLogin","writeBool","setProto3BooleanField","direct","setDirect","getDirect","convid","invitor","setConvid","setInvitor","getConvid","getInvitor","leaver","kicker","setLeaver","setKicker","getLeaver","getKicker","IMOperation","DEFAULT","CLIENTOPEN","CLIENTCLOSE","CLIENTQUERY","CONVERSATIONCREATION","CONVERSATIONMEMBERADD","CONVERSATIONMEMBERREMOVE","CONVERSATIONQUERY","CONVERSATIONUPDATENAME","CONVERSATIONLEAVE","CONVERSATIONGROUPINFO","CONVERSATIONGROUPJOIN","CONVERSATIONGROUPNICK","CONVERSATIONMEMBERADDED","CONVERSATIONMEMBERREMOVED","CONVERSATIONMESSAGESEND","CONVERSATIONMESSAGEUPDATE","CONVERSATIONMESSAGEQUERY","CONVERSATIONENTER","CONVERSATIONEXIT","CONVERSATIONMESSAGEREAD","TARGETMESSAGEPUSH","TARGETMESSAGESEND","TARGETCONVPEERSTATE","TARGETMESSAGEREAD","ACK","ACKCLIENTOPEN","Code","SUCCESS","ERRNOPERMISSION","ERRFAILED","auxiliary_pb","MsgAck","MsgRead","MsgList","Image","AuxiliaryMsg","conversationid","blobextra","getBlobextra_asB64","jetts","ackts","setConversationid","setBlobextra","setJetts","setAckts","getConversationid","getBlobextra_asU8","getJetts","getAckts","getBlobextra","msgsList","getMsgsList","addMsgs","setMsgsList","clearMsgsList","localpath","cachepath","filename","imgurl","width","height","setLocalpath","setCachepath","setFilename","setImgurl","setWidth","setHeight","getLocalpath","getCachepath","getFilename","getImgurl","getWidth","getHeight","MsgType","TEXT","PICTURE","VOICE","REDPACKET","AUXILIARY","RedpacketOpenedMsg","GroupMsg","GroupKickMsg","msgid","rpid","setMsgid","setRpid","getMsgid","getRpid","invitetype","setInvitetype","getInvitetype","AuxiliaryType","REDPACKETOPENED","GROUP","GROUPKICK","GroupInviteType","INVITOR","INVITEE","im_pb","conv_pb","controller","state","messages","ws","WebSocket","init","binaryType","onopen","console","log","onmessage","ev","buffer","Uint8Array","data","imResponse","handleMessage","onclose","onerror","clientUpdate","update","disableLog","emit","send","request","parameters","disablelog","b","response","queryConvs","convs","Date","now","EventEmitter","window","im","store","reset","items","Map","onUpdate","i","conv","set","emitUpdate","onClientUpdate","addIMListener","chat","chatId","get","IMController","addListener","Array","from","keys","app","db","urls","WeakMap","dataUrls","getDataUrl","has","getBlobUrl","file","ChatTile","props","handleLoad","setState","loaded","nextProps","nextState","showOnline","showSavedMessages","onSelect","small","big","size","ChatStore","className","classNames","React","Component","getLastMessageDate","last_message","date","dayStart","setHours","dateFormat","day","getDay","weekStart","getDate","setDate","getMessageDate","DialogTitle","onFastUpdatingComplete","forceUpdate","onUpdateChatTitle","chat_id","t","on","off","getChatTitle","defaultProps","withTranslation","DialogMeta","onClientUpdateClearHistory","clearHistory","inProgress","DialogContent","DialogBadge","Dialog","handleSelect","event","button","messageId","popup","openChat","dialog","createRef","contextMenu","left","top","isSelected","ApplicationStore","getChatId","ref","onMouseDown","onContextMenu","handleContextMenu","DialogsList","onQueryConv","soretedItems","getSortedItems","chats","onLoadNext","listRef","fistSliceLoaded","nextContext","dialogs","map","x","key","onScroll","handleScroll","Dialogs","MainPage","App","inactive","page","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cf2a82a9.chunk.js","sourcesContent":["/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.IMNut.Conversation', null, global);\ngoog.exportSymbol('proto.IMNut.ConversationList', null, global);\ngoog.exportSymbol('proto.IMNut.ConversationType', null, global);\ngoog.exportSymbol('proto.IMNut.MemNick', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.MemNick = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.MemNick, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.MemNick.displayName = 'proto.IMNut.MemNick';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.Conversation = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.IMNut.Conversation.repeatedFields_, null);\n};\ngoog.inherits(proto.IMNut.Conversation, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.Conversation.displayName = 'proto.IMNut.Conversation';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.ConversationList = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.IMNut.ConversationList.repeatedFields_, null);\n};\ngoog.inherits(proto.IMNut.ConversationList, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.ConversationList.displayName = 'proto.IMNut.ConversationList';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.MemNick.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.MemNick.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.MemNick} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MemNick.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    cid: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    nick: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.MemNick}\n */\nproto.IMNut.MemNick.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.MemNick;\n  return proto.IMNut.MemNick.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.MemNick} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.MemNick}\n */\nproto.IMNut.MemNick.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCid(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setNick(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.MemNick.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.MemNick.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.MemNick} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MemNick.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCid();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getNick();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string cid = 1;\n * @return {string}\n */\nproto.IMNut.MemNick.prototype.getCid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.MemNick.prototype.setCid = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string nick = 2;\n * @return {string}\n */\nproto.IMNut.MemNick.prototype.getNick = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.MemNick.prototype.setNick = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.IMNut.Conversation.repeatedFields_ = [4,7,8];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.Conversation.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.Conversation.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.Conversation} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.Conversation.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    name: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    type: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    cidsList: jspb.Message.getRepeatedField(msg, 4),\n    creator: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n    version: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    membersList: jspb.Message.getRepeatedField(msg, 7),\n    nicksList: jspb.Message.toObjectList(msg.getNicksList(),\n    proto.IMNut.MemNick.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.Conversation}\n */\nproto.IMNut.Conversation.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.Conversation;\n  return proto.IMNut.Conversation.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.Conversation} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.Conversation}\n */\nproto.IMNut.Conversation.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.IMNut.ConversationType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.addCids(value);\n      break;\n    case 5:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCreator(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setVersion(value);\n      break;\n    case 7:\n      var value = /** @type {string} */ (reader.readString());\n      msg.addMembers(value);\n      break;\n    case 8:\n      var value = new proto.IMNut.MemNick;\n      reader.readMessage(value,proto.IMNut.MemNick.deserializeBinaryFromReader);\n      msg.addNicks(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.Conversation.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.Conversation.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.Conversation} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.Conversation.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getCidsList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(\n      4,\n      f\n    );\n  }\n  f = message.getCreator();\n  if (f.length > 0) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n  f = message.getMembersList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(\n      7,\n      f\n    );\n  }\n  f = message.getNicksList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      8,\n      f,\n      proto.IMNut.MemNick.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.IMNut.Conversation.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Conversation.prototype.setId = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string name = 2;\n * @return {string}\n */\nproto.IMNut.Conversation.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Conversation.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional ConversationType type = 3;\n * @return {!proto.IMNut.ConversationType}\n */\nproto.IMNut.Conversation.prototype.getType = function() {\n  return /** @type {!proto.IMNut.ConversationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {!proto.IMNut.ConversationType} value */\nproto.IMNut.Conversation.prototype.setType = function(value) {\n  jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * repeated string cids = 4;\n * @return {!Array<string>}\n */\nproto.IMNut.Conversation.prototype.getCidsList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));\n};\n\n\n/** @param {!Array<string>} value */\nproto.IMNut.Conversation.prototype.setCidsList = function(value) {\n  jspb.Message.setField(this, 4, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number=} opt_index\n */\nproto.IMNut.Conversation.prototype.addCids = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n */\nproto.IMNut.Conversation.prototype.clearCidsList = function() {\n  this.setCidsList([]);\n};\n\n\n/**\n * optional string creator = 5;\n * @return {string}\n */\nproto.IMNut.Conversation.prototype.getCreator = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Conversation.prototype.setCreator = function(value) {\n  jspb.Message.setProto3StringField(this, 5, value);\n};\n\n\n/**\n * optional int32 version = 6;\n * @return {number}\n */\nproto.IMNut.Conversation.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.Conversation.prototype.setVersion = function(value) {\n  jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * repeated string members = 7;\n * @return {!Array<string>}\n */\nproto.IMNut.Conversation.prototype.getMembersList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));\n};\n\n\n/** @param {!Array<string>} value */\nproto.IMNut.Conversation.prototype.setMembersList = function(value) {\n  jspb.Message.setField(this, 7, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number=} opt_index\n */\nproto.IMNut.Conversation.prototype.addMembers = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 7, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n */\nproto.IMNut.Conversation.prototype.clearMembersList = function() {\n  this.setMembersList([]);\n};\n\n\n/**\n * repeated MemNick nicks = 8;\n * @return {!Array<!proto.IMNut.MemNick>}\n */\nproto.IMNut.Conversation.prototype.getNicksList = function() {\n  return /** @type{!Array<!proto.IMNut.MemNick>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.IMNut.MemNick, 8));\n};\n\n\n/** @param {!Array<!proto.IMNut.MemNick>} value */\nproto.IMNut.Conversation.prototype.setNicksList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 8, value);\n};\n\n\n/**\n * @param {!proto.IMNut.MemNick=} opt_value\n * @param {number=} opt_index\n * @return {!proto.IMNut.MemNick}\n */\nproto.IMNut.Conversation.prototype.addNicks = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.IMNut.MemNick, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n */\nproto.IMNut.Conversation.prototype.clearNicksList = function() {\n  this.setNicksList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.IMNut.ConversationList.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.ConversationList.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.ConversationList.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.ConversationList} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.ConversationList.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    convsList: jspb.Message.toObjectList(msg.getConvsList(),\n    proto.IMNut.Conversation.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.ConversationList}\n */\nproto.IMNut.ConversationList.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.ConversationList;\n  return proto.IMNut.ConversationList.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.ConversationList} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.ConversationList}\n */\nproto.IMNut.ConversationList.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setLimit(value);\n      break;\n    case 2:\n      var value = new proto.IMNut.Conversation;\n      reader.readMessage(value,proto.IMNut.Conversation.deserializeBinaryFromReader);\n      msg.addConvs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.ConversationList.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.ConversationList.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.ConversationList} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.ConversationList.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLimit();\n  if (f !== 0) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f = message.getConvsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.IMNut.Conversation.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional int32 limit = 1;\n * @return {number}\n */\nproto.IMNut.ConversationList.prototype.getLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.ConversationList.prototype.setLimit = function(value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * repeated Conversation convs = 2;\n * @return {!Array<!proto.IMNut.Conversation>}\n */\nproto.IMNut.ConversationList.prototype.getConvsList = function() {\n  return /** @type{!Array<!proto.IMNut.Conversation>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.IMNut.Conversation, 2));\n};\n\n\n/** @param {!Array<!proto.IMNut.Conversation>} value */\nproto.IMNut.ConversationList.prototype.setConvsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.IMNut.Conversation=} opt_value\n * @param {number=} opt_index\n * @return {!proto.IMNut.Conversation}\n */\nproto.IMNut.ConversationList.prototype.addConvs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IMNut.Conversation, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n */\nproto.IMNut.ConversationList.prototype.clearConvsList = function() {\n  this.setConvsList([]);\n};\n\n\n/**\n * @enum {number}\n */\nproto.IMNut.ConversationType = {\n  SINGLE: 0,\n  MULTIPLE: 1,\n  SYS: 2\n};\n\ngoog.object.extend(exports, proto.IMNut);\n","/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar msg_pb = require('./msg_pb.js');\ngoog.object.extend(proto, msg_pb);\nvar conversation_pb = require('./conversation_pb.js');\ngoog.object.extend(proto, conversation_pb);\ngoog.exportSymbol('proto.IMNut.Code', null, global);\ngoog.exportSymbol('proto.IMNut.IMAck', null, global);\ngoog.exportSymbol('proto.IMNut.IMOperation', null, global);\ngoog.exportSymbol('proto.IMNut.IMRequest', null, global);\ngoog.exportSymbol('proto.IMNut.IMResponse', null, global);\ngoog.exportSymbol('proto.IMNut.MessageQuery', null, global);\ngoog.exportSymbol('proto.IMNut.NatsMsg', null, global);\ngoog.exportSymbol('proto.IMNut.OpResult', null, global);\ngoog.exportSymbol('proto.IMNut.TgtGroupMemberAdded', null, global);\ngoog.exportSymbol('proto.IMNut.TgtGroupMemberRemoved', null, global);\ngoog.exportSymbol('proto.IMNut.TgtMsgPush', null, global);\ngoog.exportSymbol('proto.IMNut.TgtPeerState', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.NatsMsg = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.NatsMsg, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.NatsMsg.displayName = 'proto.IMNut.NatsMsg';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.IMAck = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.IMAck, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.IMAck.displayName = 'proto.IMNut.IMAck';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.IMRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.IMRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.IMRequest.displayName = 'proto.IMNut.IMRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.IMResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.IMResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.IMResponse.displayName = 'proto.IMNut.IMResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.OpResult = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.OpResult, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.OpResult.displayName = 'proto.IMNut.OpResult';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.TgtMsgPush = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.TgtMsgPush, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.TgtMsgPush.displayName = 'proto.IMNut.TgtMsgPush';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.TgtPeerState = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.TgtPeerState, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.TgtPeerState.displayName = 'proto.IMNut.TgtPeerState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.MessageQuery = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.MessageQuery, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.MessageQuery.displayName = 'proto.IMNut.MessageQuery';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.TgtGroupMemberAdded = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.TgtGroupMemberAdded, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.TgtGroupMemberAdded.displayName = 'proto.IMNut.TgtGroupMemberAdded';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.TgtGroupMemberRemoved = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.TgtGroupMemberRemoved, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.TgtGroupMemberRemoved.displayName = 'proto.IMNut.TgtGroupMemberRemoved';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.NatsMsg.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.NatsMsg.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.NatsMsg} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.NatsMsg.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    blob: msg.getBlob_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.NatsMsg}\n */\nproto.IMNut.NatsMsg.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.NatsMsg;\n  return proto.IMNut.NatsMsg.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.NatsMsg} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.NatsMsg}\n */\nproto.IMNut.NatsMsg.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.IMNut.IMOperation} */ (reader.readEnum());\n      msg.setOperation(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlob(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.NatsMsg.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.NatsMsg.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.NatsMsg} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.NatsMsg.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOperation();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getBlob_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional IMOperation operation = 1;\n * @return {!proto.IMNut.IMOperation}\n */\nproto.IMNut.NatsMsg.prototype.getOperation = function() {\n  return /** @type {!proto.IMNut.IMOperation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.IMNut.IMOperation} value */\nproto.IMNut.NatsMsg.prototype.setOperation = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional bytes blob = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.NatsMsg.prototype.getBlob = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes blob = 2;\n * This is a type-conversion wrapper around `getBlob()`\n * @return {string}\n */\nproto.IMNut.NatsMsg.prototype.getBlob_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlob()));\n};\n\n\n/**\n * optional bytes blob = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlob()`\n * @return {!Uint8Array}\n */\nproto.IMNut.NatsMsg.prototype.getBlob_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlob()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.NatsMsg.prototype.setBlob = function(value) {\n  jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.IMAck.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.IMAck.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.IMAck} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.IMAck.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    blob: msg.getBlob_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.IMAck}\n */\nproto.IMNut.IMAck.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.IMAck;\n  return proto.IMNut.IMAck.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.IMAck} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.IMAck}\n */\nproto.IMNut.IMAck.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.IMNut.IMOperation} */ (reader.readEnum());\n      msg.setOperation(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlob(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.IMAck.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.IMAck.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.IMAck} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.IMAck.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOperation();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getBlob_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional IMOperation operation = 1;\n * @return {!proto.IMNut.IMOperation}\n */\nproto.IMNut.IMAck.prototype.getOperation = function() {\n  return /** @type {!proto.IMNut.IMOperation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.IMNut.IMOperation} value */\nproto.IMNut.IMAck.prototype.setOperation = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional bytes blob = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.IMAck.prototype.getBlob = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes blob = 2;\n * This is a type-conversion wrapper around `getBlob()`\n * @return {string}\n */\nproto.IMNut.IMAck.prototype.getBlob_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlob()));\n};\n\n\n/**\n * optional bytes blob = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlob()`\n * @return {!Uint8Array}\n */\nproto.IMNut.IMAck.prototype.getBlob_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlob()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.IMAck.prototype.setBlob = function(value) {\n  jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.IMRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.IMRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.IMRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.IMRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    cid: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    conversation: (f = msg.getConversation()) && conversation_pb.Conversation.toObject(includeInstance, f),\n    msg: (f = msg.getMsg()) && msg_pb.Msg.toObject(includeInstance, f),\n    blob: msg.getBlob_asB64(),\n    ts: jspb.Message.getFieldWithDefault(msg, 10, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.IMRequest}\n */\nproto.IMNut.IMRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.IMRequest;\n  return proto.IMNut.IMRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.IMRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.IMRequest}\n */\nproto.IMNut.IMRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.IMNut.IMOperation} */ (reader.readEnum());\n      msg.setOperation(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCid(value);\n      break;\n    case 3:\n      var value = new conversation_pb.Conversation;\n      reader.readMessage(value,conversation_pb.Conversation.deserializeBinaryFromReader);\n      msg.setConversation(value);\n      break;\n    case 4:\n      var value = new msg_pb.Msg;\n      reader.readMessage(value,msg_pb.Msg.deserializeBinaryFromReader);\n      msg.setMsg(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlob(value);\n      break;\n    case 10:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setTs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.IMRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.IMRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.IMRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.IMRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOperation();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getCid();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getConversation();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      conversation_pb.Conversation.serializeBinaryToWriter\n    );\n  }\n  f = message.getMsg();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      msg_pb.Msg.serializeBinaryToWriter\n    );\n  }\n  f = message.getBlob_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n  f = message.getTs();\n  if (f !== 0) {\n    writer.writeInt64(\n      10,\n      f\n    );\n  }\n};\n\n\n/**\n * optional IMOperation operation = 1;\n * @return {!proto.IMNut.IMOperation}\n */\nproto.IMNut.IMRequest.prototype.getOperation = function() {\n  return /** @type {!proto.IMNut.IMOperation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.IMNut.IMOperation} value */\nproto.IMNut.IMRequest.prototype.setOperation = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string cid = 2;\n * @return {string}\n */\nproto.IMNut.IMRequest.prototype.getCid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.IMRequest.prototype.setCid = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional Conversation conversation = 3;\n * @return {?proto.IMNut.Conversation}\n */\nproto.IMNut.IMRequest.prototype.getConversation = function() {\n  return /** @type{?proto.IMNut.Conversation} */ (\n    jspb.Message.getWrapperField(this, conversation_pb.Conversation, 3));\n};\n\n\n/** @param {?proto.IMNut.Conversation|undefined} value */\nproto.IMNut.IMRequest.prototype.setConversation = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n */\nproto.IMNut.IMRequest.prototype.clearConversation = function() {\n  this.setConversation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.IMNut.IMRequest.prototype.hasConversation = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional Msg msg = 4;\n * @return {?proto.IMNut.Msg}\n */\nproto.IMNut.IMRequest.prototype.getMsg = function() {\n  return /** @type{?proto.IMNut.Msg} */ (\n    jspb.Message.getWrapperField(this, msg_pb.Msg, 4));\n};\n\n\n/** @param {?proto.IMNut.Msg|undefined} value */\nproto.IMNut.IMRequest.prototype.setMsg = function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n */\nproto.IMNut.IMRequest.prototype.clearMsg = function() {\n  this.setMsg(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.IMNut.IMRequest.prototype.hasMsg = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional bytes blob = 5;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.IMRequest.prototype.getBlob = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes blob = 5;\n * This is a type-conversion wrapper around `getBlob()`\n * @return {string}\n */\nproto.IMNut.IMRequest.prototype.getBlob_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlob()));\n};\n\n\n/**\n * optional bytes blob = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlob()`\n * @return {!Uint8Array}\n */\nproto.IMNut.IMRequest.prototype.getBlob_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlob()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.IMRequest.prototype.setBlob = function(value) {\n  jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n/**\n * optional int64 ts = 10;\n * @return {number}\n */\nproto.IMNut.IMRequest.prototype.getTs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.IMRequest.prototype.setTs = function(value) {\n  jspb.Message.setProto3IntField(this, 10, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.IMResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.IMResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.IMResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.IMResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    cid: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    blob: msg.getBlob_asB64(),\n    ts: jspb.Message.getFieldWithDefault(msg, 10, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.IMResponse}\n */\nproto.IMNut.IMResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.IMResponse;\n  return proto.IMNut.IMResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.IMResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.IMResponse}\n */\nproto.IMNut.IMResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.IMNut.IMOperation} */ (reader.readEnum());\n      msg.setOperation(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCid(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlob(value);\n      break;\n    case 10:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setTs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.IMResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.IMResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.IMResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.IMResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOperation();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getCid();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getBlob_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getTs();\n  if (f !== 0) {\n    writer.writeInt64(\n      10,\n      f\n    );\n  }\n};\n\n\n/**\n * optional IMOperation operation = 1;\n * @return {!proto.IMNut.IMOperation}\n */\nproto.IMNut.IMResponse.prototype.getOperation = function() {\n  return /** @type {!proto.IMNut.IMOperation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.IMNut.IMOperation} value */\nproto.IMNut.IMResponse.prototype.setOperation = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string cid = 2;\n * @return {string}\n */\nproto.IMNut.IMResponse.prototype.getCid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.IMResponse.prototype.setCid = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bytes blob = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.IMResponse.prototype.getBlob = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes blob = 3;\n * This is a type-conversion wrapper around `getBlob()`\n * @return {string}\n */\nproto.IMNut.IMResponse.prototype.getBlob_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlob()));\n};\n\n\n/**\n * optional bytes blob = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlob()`\n * @return {!Uint8Array}\n */\nproto.IMNut.IMResponse.prototype.getBlob_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlob()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.IMResponse.prototype.setBlob = function(value) {\n  jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional int64 ts = 10;\n * @return {number}\n */\nproto.IMNut.IMResponse.prototype.getTs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.IMResponse.prototype.setTs = function(value) {\n  jspb.Message.setProto3IntField(this, 10, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.OpResult.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.OpResult.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.OpResult} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.OpResult.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    code: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    msg: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    blob: msg.getBlob_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.OpResult}\n */\nproto.IMNut.OpResult.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.OpResult;\n  return proto.IMNut.OpResult.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.OpResult} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.OpResult}\n */\nproto.IMNut.OpResult.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.IMNut.Code} */ (reader.readEnum());\n      msg.setCode(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMsg(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlob(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.OpResult.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.OpResult.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.OpResult} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.OpResult.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCode();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getMsg();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getBlob_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional Code code = 1;\n * @return {!proto.IMNut.Code}\n */\nproto.IMNut.OpResult.prototype.getCode = function() {\n  return /** @type {!proto.IMNut.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.IMNut.Code} value */\nproto.IMNut.OpResult.prototype.setCode = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string msg = 2;\n * @return {string}\n */\nproto.IMNut.OpResult.prototype.getMsg = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.OpResult.prototype.setMsg = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bytes blob = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.OpResult.prototype.getBlob = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes blob = 3;\n * This is a type-conversion wrapper around `getBlob()`\n * @return {string}\n */\nproto.IMNut.OpResult.prototype.getBlob_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlob()));\n};\n\n\n/**\n * optional bytes blob = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlob()`\n * @return {!Uint8Array}\n */\nproto.IMNut.OpResult.prototype.getBlob_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlob()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.OpResult.prototype.setBlob = function(value) {\n  jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.TgtMsgPush.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.TgtMsgPush.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.TgtMsgPush} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtMsgPush.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    c: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.TgtMsgPush}\n */\nproto.IMNut.TgtMsgPush.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.TgtMsgPush;\n  return proto.IMNut.TgtMsgPush.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.TgtMsgPush} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.TgtMsgPush}\n */\nproto.IMNut.TgtMsgPush.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setC(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.TgtMsgPush.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.TgtMsgPush.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.TgtMsgPush} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtMsgPush.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getC();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string c = 1;\n * @return {string}\n */\nproto.IMNut.TgtMsgPush.prototype.getC = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.TgtMsgPush.prototype.setC = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.TgtPeerState.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.TgtPeerState.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.TgtPeerState} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtPeerState.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    cid: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    login: jspb.Message.getFieldWithDefault(msg, 2, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.TgtPeerState}\n */\nproto.IMNut.TgtPeerState.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.TgtPeerState;\n  return proto.IMNut.TgtPeerState.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.TgtPeerState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.TgtPeerState}\n */\nproto.IMNut.TgtPeerState.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCid(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setLogin(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.TgtPeerState.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.TgtPeerState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.TgtPeerState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtPeerState.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCid();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getLogin();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string cid = 1;\n * @return {string}\n */\nproto.IMNut.TgtPeerState.prototype.getCid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.TgtPeerState.prototype.setCid = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bool login = 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\nproto.IMNut.TgtPeerState.prototype.getLogin = function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));\n};\n\n\n/** @param {boolean} value */\nproto.IMNut.TgtPeerState.prototype.setLogin = function(value) {\n  jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.MessageQuery.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.MessageQuery.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.MessageQuery} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MessageQuery.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    direct: jspb.Message.getFieldWithDefault(msg, 1, false),\n    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.MessageQuery}\n */\nproto.IMNut.MessageQuery.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.MessageQuery;\n  return proto.IMNut.MessageQuery.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.MessageQuery} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.MessageQuery}\n */\nproto.IMNut.MessageQuery.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDirect(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setLimit(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.MessageQuery.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.MessageQuery.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.MessageQuery} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MessageQuery.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDirect();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f = message.getLimit();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool direct = 1;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * @return {boolean}\n */\nproto.IMNut.MessageQuery.prototype.getDirect = function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));\n};\n\n\n/** @param {boolean} value */\nproto.IMNut.MessageQuery.prototype.setDirect = function(value) {\n  jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n/**\n * optional int32 limit = 2;\n * @return {number}\n */\nproto.IMNut.MessageQuery.prototype.getLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.MessageQuery.prototype.setLimit = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.TgtGroupMemberAdded.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.TgtGroupMemberAdded.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.TgtGroupMemberAdded} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtGroupMemberAdded.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    convid: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    invitor: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.TgtGroupMemberAdded}\n */\nproto.IMNut.TgtGroupMemberAdded.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.TgtGroupMemberAdded;\n  return proto.IMNut.TgtGroupMemberAdded.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.TgtGroupMemberAdded} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.TgtGroupMemberAdded}\n */\nproto.IMNut.TgtGroupMemberAdded.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setConvid(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setInvitor(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.TgtGroupMemberAdded.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.TgtGroupMemberAdded.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.TgtGroupMemberAdded} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtGroupMemberAdded.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getConvid();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getInvitor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string convId = 1;\n * @return {string}\n */\nproto.IMNut.TgtGroupMemberAdded.prototype.getConvid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.TgtGroupMemberAdded.prototype.setConvid = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string invitor = 2;\n * @return {string}\n */\nproto.IMNut.TgtGroupMemberAdded.prototype.getInvitor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.TgtGroupMemberAdded.prototype.setInvitor = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.TgtGroupMemberRemoved.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.TgtGroupMemberRemoved.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.TgtGroupMemberRemoved} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtGroupMemberRemoved.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    convid: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    leaver: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    kicker: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.TgtGroupMemberRemoved}\n */\nproto.IMNut.TgtGroupMemberRemoved.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.TgtGroupMemberRemoved;\n  return proto.IMNut.TgtGroupMemberRemoved.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.TgtGroupMemberRemoved} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.TgtGroupMemberRemoved}\n */\nproto.IMNut.TgtGroupMemberRemoved.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setConvid(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLeaver(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKicker(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.TgtGroupMemberRemoved.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.TgtGroupMemberRemoved.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.TgtGroupMemberRemoved} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.TgtGroupMemberRemoved.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getConvid();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getLeaver();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getKicker();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string convId = 1;\n * @return {string}\n */\nproto.IMNut.TgtGroupMemberRemoved.prototype.getConvid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.TgtGroupMemberRemoved.prototype.setConvid = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string leaver = 2;\n * @return {string}\n */\nproto.IMNut.TgtGroupMemberRemoved.prototype.getLeaver = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.TgtGroupMemberRemoved.prototype.setLeaver = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string kicker = 3;\n * @return {string}\n */\nproto.IMNut.TgtGroupMemberRemoved.prototype.getKicker = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.TgtGroupMemberRemoved.prototype.setKicker = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * @enum {number}\n */\nproto.IMNut.IMOperation = {\n  DEFAULT: 0,\n  CLIENTOPEN: 1,\n  CLIENTCLOSE: 2,\n  CLIENTQUERY: 3,\n  CONVERSATIONCREATION: 1000,\n  CONVERSATIONMEMBERADD: 1001,\n  CONVERSATIONMEMBERREMOVE: 1002,\n  CONVERSATIONQUERY: 1003,\n  CONVERSATIONUPDATENAME: 1004,\n  CONVERSATIONLEAVE: 1005,\n  CONVERSATIONGROUPINFO: 1006,\n  CONVERSATIONGROUPJOIN: 1007,\n  CONVERSATIONGROUPNICK: 1008,\n  CONVERSATIONMEMBERADDED: 1100,\n  CONVERSATIONMEMBERREMOVED: 1101,\n  CONVERSATIONMESSAGESEND: 2000,\n  CONVERSATIONMESSAGEUPDATE: 2001,\n  CONVERSATIONMESSAGEQUERY: 2002,\n  CONVERSATIONENTER: 2003,\n  CONVERSATIONEXIT: 2004,\n  CONVERSATIONMESSAGEREAD: 2005,\n  TARGETMESSAGEPUSH: 3000,\n  TARGETMESSAGESEND: 3001,\n  TARGETCONVPEERSTATE: 3002,\n  TARGETMESSAGEREAD: 3003,\n  ACK: 4000,\n  ACKCLIENTOPEN: 4001\n};\n\n/**\n * @enum {number}\n */\nproto.IMNut.Code = {\n  SUCCESS: 0,\n  ERRNOPERMISSION: 1,\n  ERRFAILED: 2\n};\n\ngoog.object.extend(exports, proto.IMNut);\n","/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar auxiliary_pb = require('./auxiliary_pb.js');\ngoog.object.extend(proto, auxiliary_pb);\ngoog.exportSymbol('proto.IMNut.AuxiliaryMsg', null, global);\ngoog.exportSymbol('proto.IMNut.Image', null, global);\ngoog.exportSymbol('proto.IMNut.Msg', null, global);\ngoog.exportSymbol('proto.IMNut.MsgAck', null, global);\ngoog.exportSymbol('proto.IMNut.MsgList', null, global);\ngoog.exportSymbol('proto.IMNut.MsgRead', null, global);\ngoog.exportSymbol('proto.IMNut.MsgType', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.Msg = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.Msg, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.Msg.displayName = 'proto.IMNut.Msg';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.MsgAck = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.MsgAck, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.MsgAck.displayName = 'proto.IMNut.MsgAck';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.MsgRead = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.MsgRead, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.MsgRead.displayName = 'proto.IMNut.MsgRead';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.MsgList = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.IMNut.MsgList.repeatedFields_, null);\n};\ngoog.inherits(proto.IMNut.MsgList, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.MsgList.displayName = 'proto.IMNut.MsgList';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.Image = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.Image, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.Image.displayName = 'proto.IMNut.Image';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.AuxiliaryMsg = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.AuxiliaryMsg, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.AuxiliaryMsg.displayName = 'proto.IMNut.AuxiliaryMsg';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.Msg.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.Msg.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.Msg} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.Msg.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    conversationid: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    cid: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    type: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    blob: msg.getBlob_asB64(),\n    blobextra: msg.getBlobextra_asB64(),\n    jetts: jspb.Message.getFieldWithDefault(msg, 10, 0),\n    ackts: jspb.Message.getFieldWithDefault(msg, 11, 0),\n    id: jspb.Message.getFieldWithDefault(msg, 12, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.Msg}\n */\nproto.IMNut.Msg.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.Msg;\n  return proto.IMNut.Msg.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.Msg} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.Msg}\n */\nproto.IMNut.Msg.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setConversationid(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCid(value);\n      break;\n    case 5:\n      var value = /** @type {!proto.IMNut.MsgType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlob(value);\n      break;\n    case 7:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlobextra(value);\n      break;\n    case 10:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setJetts(value);\n      break;\n    case 11:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setAckts(value);\n      break;\n    case 12:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.Msg.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.Msg.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.Msg} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.Msg.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getConversationid();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCid();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      5,\n      f\n    );\n  }\n  f = message.getBlob_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f = message.getBlobextra_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      7,\n      f\n    );\n  }\n  f = message.getJetts();\n  if (f !== 0) {\n    writer.writeInt64(\n      10,\n      f\n    );\n  }\n  f = message.getAckts();\n  if (f !== 0) {\n    writer.writeInt64(\n      11,\n      f\n    );\n  }\n  f = message.getId();\n  if (f !== 0) {\n    writer.writeInt64(\n      12,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string conversationId = 1;\n * @return {string}\n */\nproto.IMNut.Msg.prototype.getConversationid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Msg.prototype.setConversationid = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string cid = 2;\n * @return {string}\n */\nproto.IMNut.Msg.prototype.getCid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Msg.prototype.setCid = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional MsgType type = 5;\n * @return {!proto.IMNut.MsgType}\n */\nproto.IMNut.Msg.prototype.getType = function() {\n  return /** @type {!proto.IMNut.MsgType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/** @param {!proto.IMNut.MsgType} value */\nproto.IMNut.Msg.prototype.setType = function(value) {\n  jspb.Message.setProto3EnumField(this, 5, value);\n};\n\n\n/**\n * optional bytes blob = 6;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.Msg.prototype.getBlob = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * optional bytes blob = 6;\n * This is a type-conversion wrapper around `getBlob()`\n * @return {string}\n */\nproto.IMNut.Msg.prototype.getBlob_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlob()));\n};\n\n\n/**\n * optional bytes blob = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlob()`\n * @return {!Uint8Array}\n */\nproto.IMNut.Msg.prototype.getBlob_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlob()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.Msg.prototype.setBlob = function(value) {\n  jspb.Message.setProto3BytesField(this, 6, value);\n};\n\n\n/**\n * optional bytes blobExtra = 7;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.Msg.prototype.getBlobextra = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * optional bytes blobExtra = 7;\n * This is a type-conversion wrapper around `getBlobextra()`\n * @return {string}\n */\nproto.IMNut.Msg.prototype.getBlobextra_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlobextra()));\n};\n\n\n/**\n * optional bytes blobExtra = 7;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlobextra()`\n * @return {!Uint8Array}\n */\nproto.IMNut.Msg.prototype.getBlobextra_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlobextra()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.Msg.prototype.setBlobextra = function(value) {\n  jspb.Message.setProto3BytesField(this, 7, value);\n};\n\n\n/**\n * optional int64 jetTs = 10;\n * @return {number}\n */\nproto.IMNut.Msg.prototype.getJetts = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.Msg.prototype.setJetts = function(value) {\n  jspb.Message.setProto3IntField(this, 10, value);\n};\n\n\n/**\n * optional int64 ackTs = 11;\n * @return {number}\n */\nproto.IMNut.Msg.prototype.getAckts = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.Msg.prototype.setAckts = function(value) {\n  jspb.Message.setProto3IntField(this, 11, value);\n};\n\n\n/**\n * optional int64 id = 12;\n * @return {number}\n */\nproto.IMNut.Msg.prototype.getId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.Msg.prototype.setId = function(value) {\n  jspb.Message.setProto3IntField(this, 12, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.MsgAck.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.MsgAck.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.MsgAck} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MsgAck.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    conversationid: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    id: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    jetts: jspb.Message.getFieldWithDefault(msg, 10, 0),\n    ackts: jspb.Message.getFieldWithDefault(msg, 11, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.MsgAck}\n */\nproto.IMNut.MsgAck.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.MsgAck;\n  return proto.IMNut.MsgAck.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.MsgAck} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.MsgAck}\n */\nproto.IMNut.MsgAck.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setConversationid(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setId(value);\n      break;\n    case 10:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setJetts(value);\n      break;\n    case 11:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setAckts(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.MsgAck.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.MsgAck.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.MsgAck} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MsgAck.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getConversationid();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getId();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getJetts();\n  if (f !== 0) {\n    writer.writeInt64(\n      10,\n      f\n    );\n  }\n  f = message.getAckts();\n  if (f !== 0) {\n    writer.writeInt64(\n      11,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string conversationId = 1;\n * @return {string}\n */\nproto.IMNut.MsgAck.prototype.getConversationid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.MsgAck.prototype.setConversationid = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional int64 id = 2;\n * @return {number}\n */\nproto.IMNut.MsgAck.prototype.getId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.MsgAck.prototype.setId = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional int64 jetTs = 10;\n * @return {number}\n */\nproto.IMNut.MsgAck.prototype.getJetts = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.MsgAck.prototype.setJetts = function(value) {\n  jspb.Message.setProto3IntField(this, 10, value);\n};\n\n\n/**\n * optional int64 ackTs = 11;\n * @return {number}\n */\nproto.IMNut.MsgAck.prototype.getAckts = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.MsgAck.prototype.setAckts = function(value) {\n  jspb.Message.setProto3IntField(this, 11, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.MsgRead.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.MsgRead.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.MsgRead} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MsgRead.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    conversationid: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    id: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    cid: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.MsgRead}\n */\nproto.IMNut.MsgRead.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.MsgRead;\n  return proto.IMNut.MsgRead.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.MsgRead} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.MsgRead}\n */\nproto.IMNut.MsgRead.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setConversationid(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setId(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCid(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.MsgRead.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.MsgRead.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.MsgRead} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MsgRead.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getConversationid();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getId();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getCid();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string conversationId = 1;\n * @return {string}\n */\nproto.IMNut.MsgRead.prototype.getConversationid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.MsgRead.prototype.setConversationid = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional int64 id = 2;\n * @return {number}\n */\nproto.IMNut.MsgRead.prototype.getId = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.MsgRead.prototype.setId = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string cid = 3;\n * @return {string}\n */\nproto.IMNut.MsgRead.prototype.getCid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.MsgRead.prototype.setCid = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.IMNut.MsgList.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.MsgList.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.MsgList.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.MsgList} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MsgList.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    msgsList: jspb.Message.toObjectList(msg.getMsgsList(),\n    proto.IMNut.Msg.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.MsgList}\n */\nproto.IMNut.MsgList.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.MsgList;\n  return proto.IMNut.MsgList.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.MsgList} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.MsgList}\n */\nproto.IMNut.MsgList.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setLimit(value);\n      break;\n    case 2:\n      var value = new proto.IMNut.Msg;\n      reader.readMessage(value,proto.IMNut.Msg.deserializeBinaryFromReader);\n      msg.addMsgs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.MsgList.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.MsgList.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.MsgList} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.MsgList.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLimit();\n  if (f !== 0) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f = message.getMsgsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.IMNut.Msg.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional int32 limit = 1;\n * @return {number}\n */\nproto.IMNut.MsgList.prototype.getLimit = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.MsgList.prototype.setLimit = function(value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * repeated Msg msgs = 2;\n * @return {!Array<!proto.IMNut.Msg>}\n */\nproto.IMNut.MsgList.prototype.getMsgsList = function() {\n  return /** @type{!Array<!proto.IMNut.Msg>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.IMNut.Msg, 2));\n};\n\n\n/** @param {!Array<!proto.IMNut.Msg>} value */\nproto.IMNut.MsgList.prototype.setMsgsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.IMNut.Msg=} opt_value\n * @param {number=} opt_index\n * @return {!proto.IMNut.Msg}\n */\nproto.IMNut.MsgList.prototype.addMsgs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IMNut.Msg, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n */\nproto.IMNut.MsgList.prototype.clearMsgsList = function() {\n  this.setMsgsList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.Image.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.Image.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.Image} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.Image.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    localpath: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    cachepath: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    filename: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    imgurl: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    width: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    height: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.Image}\n */\nproto.IMNut.Image.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.Image;\n  return proto.IMNut.Image.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.Image} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.Image}\n */\nproto.IMNut.Image.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLocalpath(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCachepath(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setFilename(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setImgurl(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setWidth(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setHeight(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.Image.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.Image.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.Image} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.Image.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLocalpath();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCachepath();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getFilename();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getImgurl();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getWidth();\n  if (f !== 0) {\n    writer.writeInt32(\n      5,\n      f\n    );\n  }\n  f = message.getHeight();\n  if (f !== 0) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string localPath = 1;\n * @return {string}\n */\nproto.IMNut.Image.prototype.getLocalpath = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Image.prototype.setLocalpath = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string cachePath = 2;\n * @return {string}\n */\nproto.IMNut.Image.prototype.getCachepath = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Image.prototype.setCachepath = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string filename = 3;\n * @return {string}\n */\nproto.IMNut.Image.prototype.getFilename = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Image.prototype.setFilename = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string imgUrl = 4;\n * @return {string}\n */\nproto.IMNut.Image.prototype.getImgurl = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.Image.prototype.setImgurl = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional int32 width = 5;\n * @return {number}\n */\nproto.IMNut.Image.prototype.getWidth = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.Image.prototype.setWidth = function(value) {\n  jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional int32 height = 6;\n * @return {number}\n */\nproto.IMNut.Image.prototype.getHeight = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.Image.prototype.setHeight = function(value) {\n  jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.AuxiliaryMsg.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.AuxiliaryMsg.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.AuxiliaryMsg} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.AuxiliaryMsg.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    blob: msg.getBlob_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.AuxiliaryMsg}\n */\nproto.IMNut.AuxiliaryMsg.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.AuxiliaryMsg;\n  return proto.IMNut.AuxiliaryMsg.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.AuxiliaryMsg} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.AuxiliaryMsg}\n */\nproto.IMNut.AuxiliaryMsg.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.IMNut.AuxiliaryType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBlob(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.AuxiliaryMsg.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.AuxiliaryMsg.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.AuxiliaryMsg} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.AuxiliaryMsg.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getBlob_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional AuxiliaryType type = 1;\n * @return {!proto.IMNut.AuxiliaryType}\n */\nproto.IMNut.AuxiliaryMsg.prototype.getType = function() {\n  return /** @type {!proto.IMNut.AuxiliaryType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {!proto.IMNut.AuxiliaryType} value */\nproto.IMNut.AuxiliaryMsg.prototype.setType = function(value) {\n  jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional bytes blob = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.IMNut.AuxiliaryMsg.prototype.getBlob = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes blob = 2;\n * This is a type-conversion wrapper around `getBlob()`\n * @return {string}\n */\nproto.IMNut.AuxiliaryMsg.prototype.getBlob_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBlob()));\n};\n\n\n/**\n * optional bytes blob = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBlob()`\n * @return {!Uint8Array}\n */\nproto.IMNut.AuxiliaryMsg.prototype.getBlob_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBlob()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.IMNut.AuxiliaryMsg.prototype.setBlob = function(value) {\n  jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * @enum {number}\n */\nproto.IMNut.MsgType = {\n  TEXT: 0,\n  PICTURE: 1,\n  VOICE: 2,\n  REDPACKET: 3,\n  AUXILIARY: 4\n};\n\ngoog.object.extend(exports, proto.IMNut);\n","/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.IMNut.AuxiliaryType', null, global);\ngoog.exportSymbol('proto.IMNut.GroupInviteType', null, global);\ngoog.exportSymbol('proto.IMNut.GroupKickMsg', null, global);\ngoog.exportSymbol('proto.IMNut.GroupMsg', null, global);\ngoog.exportSymbol('proto.IMNut.RedpacketOpenedMsg', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.RedpacketOpenedMsg = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.RedpacketOpenedMsg, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.RedpacketOpenedMsg.displayName = 'proto.IMNut.RedpacketOpenedMsg';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.GroupMsg = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.IMNut.GroupMsg.repeatedFields_, null);\n};\ngoog.inherits(proto.IMNut.GroupMsg, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.GroupMsg.displayName = 'proto.IMNut.GroupMsg';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.IMNut.GroupKickMsg = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.IMNut.GroupKickMsg, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.IMNut.GroupKickMsg.displayName = 'proto.IMNut.GroupKickMsg';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.RedpacketOpenedMsg.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.RedpacketOpenedMsg.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.RedpacketOpenedMsg} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.RedpacketOpenedMsg.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    msgid: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    rpid: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    convid: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.RedpacketOpenedMsg}\n */\nproto.IMNut.RedpacketOpenedMsg.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.RedpacketOpenedMsg;\n  return proto.IMNut.RedpacketOpenedMsg.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.RedpacketOpenedMsg} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.RedpacketOpenedMsg}\n */\nproto.IMNut.RedpacketOpenedMsg.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setMsgid(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRpid(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setConvid(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.RedpacketOpenedMsg.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.RedpacketOpenedMsg.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.RedpacketOpenedMsg} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.RedpacketOpenedMsg.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMsgid();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getRpid();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getConvid();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 msgId = 1;\n * @return {number}\n */\nproto.IMNut.RedpacketOpenedMsg.prototype.getMsgid = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.IMNut.RedpacketOpenedMsg.prototype.setMsgid = function(value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional string rpId = 2;\n * @return {string}\n */\nproto.IMNut.RedpacketOpenedMsg.prototype.getRpid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.RedpacketOpenedMsg.prototype.setRpid = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string convId = 3;\n * @return {string}\n */\nproto.IMNut.RedpacketOpenedMsg.prototype.getConvid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.RedpacketOpenedMsg.prototype.setConvid = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.IMNut.GroupMsg.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.GroupMsg.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.GroupMsg.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.GroupMsg} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.GroupMsg.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    cidsList: jspb.Message.getRepeatedField(msg, 1),\n    invitor: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    invitetype: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.GroupMsg}\n */\nproto.IMNut.GroupMsg.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.GroupMsg;\n  return proto.IMNut.GroupMsg.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.GroupMsg} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.GroupMsg}\n */\nproto.IMNut.GroupMsg.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.addCids(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setInvitor(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.IMNut.GroupInviteType} */ (reader.readEnum());\n      msg.setInvitetype(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.GroupMsg.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.GroupMsg.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.GroupMsg} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.GroupMsg.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCidsList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(\n      1,\n      f\n    );\n  }\n  f = message.getInvitor();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getInvitetype();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated string cids = 1;\n * @return {!Array<string>}\n */\nproto.IMNut.GroupMsg.prototype.getCidsList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {!Array<string>} value */\nproto.IMNut.GroupMsg.prototype.setCidsList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number=} opt_index\n */\nproto.IMNut.GroupMsg.prototype.addCids = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n */\nproto.IMNut.GroupMsg.prototype.clearCidsList = function() {\n  this.setCidsList([]);\n};\n\n\n/**\n * optional string invitor = 2;\n * @return {string}\n */\nproto.IMNut.GroupMsg.prototype.getInvitor = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.GroupMsg.prototype.setInvitor = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional GroupInviteType inviteType = 3;\n * @return {!proto.IMNut.GroupInviteType}\n */\nproto.IMNut.GroupMsg.prototype.getInvitetype = function() {\n  return /** @type {!proto.IMNut.GroupInviteType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {!proto.IMNut.GroupInviteType} value */\nproto.IMNut.GroupMsg.prototype.setInvitetype = function(value) {\n  jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.IMNut.GroupKickMsg.prototype.toObject = function(opt_includeInstance) {\n  return proto.IMNut.GroupKickMsg.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.IMNut.GroupKickMsg} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.GroupKickMsg.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    kicker: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    cid: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.IMNut.GroupKickMsg}\n */\nproto.IMNut.GroupKickMsg.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.IMNut.GroupKickMsg;\n  return proto.IMNut.GroupKickMsg.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.IMNut.GroupKickMsg} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.IMNut.GroupKickMsg}\n */\nproto.IMNut.GroupKickMsg.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKicker(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCid(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.IMNut.GroupKickMsg.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.IMNut.GroupKickMsg.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.IMNut.GroupKickMsg} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.IMNut.GroupKickMsg.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKicker();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCid();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string kicker = 1;\n * @return {string}\n */\nproto.IMNut.GroupKickMsg.prototype.getKicker = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.GroupKickMsg.prototype.setKicker = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string cid = 2;\n * @return {string}\n */\nproto.IMNut.GroupKickMsg.prototype.getCid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.IMNut.GroupKickMsg.prototype.setCid = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * @enum {number}\n */\nproto.IMNut.AuxiliaryType = {\n  REDPACKETOPENED: 0,\n  GROUP: 1,\n  GROUPKICK: 2\n};\n\n/**\n * @enum {number}\n */\nproto.IMNut.GroupInviteType = {\n  INVITOR: 0,\n  INVITEE: 1\n};\n\ngoog.object.extend(exports, proto.IMNut);\n","import {EventEmitter} from \"events\";\nimport {WS_URL} from \"../Constants\";\nvar im_pb = require('../gen/im_pb');\nvar conv_pb = require('../gen/conversation_pb');\n\nclass IMController extends EventEmitter {\n    state = {\n        cid: \"83ed7501a1918f33ff24e6a4\",\n        messages: [],\n    };\n    ws = new WebSocket(WS_URL);\n\n    constructor() {\n        super();\n\n        this.parameters = {};\n        this.disablelog = true;\n    }\n\n    init = () => {\n        this.ws.binaryType = 'arraybuffer';\n        this.ws.onopen = () => {\n            console.log(\"onopen\");\n            this.login();\n        };\n\n        this.ws.onmessage = ev => {\n            console.log(ev);\n            const buffer = new Uint8Array(ev.data);  // arraybuffer object\n            const imResponse = im_pb.IMResponse.deserializeBinary(buffer);\n            console.log(imResponse);\n            this.handleMessage(imResponse);\n        };\n\n        this.ws.onclose = () => {\n            console.log('disconnected');\n        };\n        this.ws.onerror = ev => {\n        }\n    };\n\n    login() {\n        const request = new im_pb.IMRequest();\n        request.setCid(this.state.cid);\n        request.setOperation(im_pb.IMOperation.CLIENTOPEN);\n        const b = request.serializeBinary();\n        console.log(request, b);\n        this.ws.send(b);\n    }\n\n    handleMessage(response) {\n        switch (response.getOperation()) {\n            case im_pb.IMOperation.CLIENTOPEN: {\n                this.queryConvs();\n                break;\n            }\n            case im_pb.IMOperation.CONVERSATIONQUERY: {\n                const convs = conv_pb.ConversationList.deserializeBinary(response.getBlob())\n                this.emit('update', {\n                    '@type': 'queryConv',\n                    convs: convs.getConvsList(),\n                });\n            }\n        }\n    }\n\n    clientUpdate = update => {\n        if (!this.disableLog) {\n            console.log('clientUpdate', update);\n        }\n        this.emit('clientUpdate', update);\n    };\n\n    send = request => {\n        this.ws.send(request);\n    };\n\n    queryConvs() {\n        console.log('queryConvs');\n        const request = new im_pb.IMRequest();\n        request.setCid(this.state.cid);\n        request.setOperation(im_pb.IMOperation.CONVERSATIONQUERY);\n        request.setTs(Date.now());\n        const b = request.serializeBinary();\n        console.log(request, b);\n        this.ws.send(b);\n    }\n}\n\nconst controller = new IMController();\nwindow.im = controller;\nexport default controller;","export const APP_NAME = \"IMNut Web\";\n\nexport const WS_URL = \"ws://203.195.155.183:444\";\nexport const PHOTO_SIZE = 320;\nexport const PHOTO_THUMBNAIL_SIZE = 90;","import {EventEmitter} from \"events\";\nimport IMController from '../Controllers/IMController';\nimport conv_pb from '../gen/conversation_pb';\n\nclass ChatStore extends EventEmitter {\n\n    constructor() {\n        super();\n        this.reset();\n\n        this.addIMListener();\n    }\n\n\n\n    reset = () => {\n        this.items = new Map();\n    };\n\n    set(chat) {\n        this.items.set(chat.id, chat);\n    }\n\n    get(chatId) {\n        return this.items.get(chatId);\n    }\n\n    onUpdate = update => {\n        console.log(\"chatstore onUpdate:\" , update);\n        switch (update['@type']) {\n            case 'queryConv': {\n                const {convs} = update;\n                const chatIds = [];\n                for (let i = 0; i < convs.length; i++) {\n                    const conv = convs[i];\n                    this.items.set(conv.getId(), conv);\n                }\n                this.emitUpdate(update);\n            }\n        }\n    };\n\n    onClientUpdate = update => {\n\n    };\n\n    emitUpdate = update => {\n        this.emit(update['@type'], update);\n    };\n\n    addIMListener() {\n        IMController.addListener('update', this.onUpdate);\n        IMController.addListener('clientUpdate', this.onClientUpdate);\n    }\n\n    getSortedItems() {\n        return Array.from(this.items.keys());\n    }\n}\n\nconst store = new ChatStore();\nwindow.chat = store;\nexport default store;","import {EventEmitter} from \"events\";\n\nclass ApplicationStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n    }\n\n    reset = () => {\n        this.chatId = 0;\n    };\n\n    getChatId() {\n        return this.chatId;\n    }\n}\n\nconst store = new ApplicationStore();\nwindow.app = store;\nexport default store;","import {EventEmitter} from \"events\";\n\nclass FileStore extends EventEmitter {\n\n    constructor() {\n        super();\n        this.reset();\n    }\n\n    reset = () => {\n\n        this.db = null;\n        this.urls = new WeakMap();\n        this.dataUrls = new Map();\n        this.items = new Map();\n    };\n\n    getDataUrl = id => {\n        if (!id) {\n            return null;\n        }\n\n        if (this.dataUrls.has(id)) {\n            return this.dataUrls.get(id);\n        }\n\n        return null;\n    };\n\n    getBlobUrl = (blob) => {\n        if (!blob) {\n            return null;\n        }\n\n        if (this.urls.has(blob)) {\n            return this.urls.get(blob);\n        }\n    }\n}\n\nconst store = new FileStore();\nwindow.file = store;\nexport default store;","import React from \"react\";\nimport classNames from 'classnames';\nimport * as PropTypes from \"prop-types\";\nimport {getSrc} from \"../../Utils/File\";\nimport ChatStore from '../../Stores/ChatStore';\nimport './ChatTile.css';\n\nclass ChatTile extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loaded: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n        const { loaded } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextState.loaded !== loaded) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleLoad = () => {\n        this.setState({ loaded: true });\n    };\n\n    render() {\n        const { chatId, showOnline, showSavedMessages, onSelect, small, big, size } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        // const { photo } = chat;\n        // const src = getSrc(photo ? photo.small : null);\n        return (\n            <div\n                className={classNames('chat-tile')}>\n                {/*{src && <img className='tile-photo' src={src} onLoad={this.handleLoad} draggable={false} alt='' />}*/}\n            </div>\n        )\n    }\n}\n\nChatTile.propTypes = {\n    chatId: PropTypes.number.isRequired\n};\n\nexport default ChatTile;","\nimport dateFormat from 'dateformat';\nimport ChatStore from '../Stores/ChatStore';\n\nfunction getChatTitle(chatId, showSavedMessages = false, t = key => key) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n}\n\nfunction getMessageDate(message) {\n    const date = new Date(message.date * 1000);\n\n    const dayStart = new Date();\n    dayStart.setHours(0, 0, 0, 0);\n    if (date > dayStart) {\n        return dateFormat(date, 'H:MM');\n    }\n\n    const now = new Date();\n    const day = now.getDay();\n    const weekStart = now.getDate() - day + (day === 0 ? -6 : 1);\n    const monday = new Date(now.setDate(weekStart));\n    if (date > monday) {\n        return dateFormat(date, 'ddd');\n    }\n\n    return dateFormat(date, 'd.mm.yyyy');\n}\n\nfunction getLastMessageDate(chat) {\n    if (!chat) return null;\n    if (!chat.last_message) return null;\n    if (!chat.last_message.date) return null;\n    // if (showChatDraft(chat.id)) return null;\n\n    return getMessageDate(chat.last_message);\n}\n\nexport {\n    getChatTitle,\n    getLastMessageDate,\n}","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport { getChatTitle } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogTitle.css';\n\nclass DialogTitle extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, t } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== t) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.off('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdateChatTitle = update => {\n        const { chatId } = this.props;\n\n        if (update.chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { t, chatId, showSavedMessages } = this.props;\n\n        const title = getChatTitle(chatId, showSavedMessages, t);\n\n        return (\n            <div className='dialog-title'>\n                <span className='dialog-title-span'>{this.props.chatId}</span>\n            </div>\n        );\n    }\n}\n\nDialogTitle.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    showSavedMessages: PropTypes.bool\n};\n\nDialogTitle.defaultProps = {\n    showSavedMessages: true\n};\n\nexport default withTranslation()(DialogTitle);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { getLastMessageDate } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogMeta.css';\n\nclass DialogMeta extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.off('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.off('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.off('updateChatDraftMessage', this.onUpdate);\n        ChatStore.off('updateChatLastMessage', this.onUpdate);\n        ChatStore.off('updateChatReadInbox', this.onUpdate);\n        ChatStore.off('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.off('updateMessageMentionRead', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { last_message } = chat;\n        if (!last_message) return null;\n\n        const date = getLastMessageDate(chat);\n        if (!date) return null;\n\n        return (\n            <div className='dialog-meta'>\n                {date}\n            </div>\n        );\n    }\n}\n\nexport default DialogMeta;\n","import * as React from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport './DialogContent.css';\n\nclass DialogContent extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, t } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== t) {\n            return true;\n        }\n\n        return false;\n    }\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n\n        return <div className='dialog-content'>{this.props.chatId}</div>;\n    }\n}\n\nexport default withTranslation()(DialogContent);","import React from \"react\";\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogBadge.css';\n\n\nclass DialogBadge extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        return (\n            <div className='dialog-badge'>\n            </div>\n        );\n    }\n}\n\nexport default DialogBadge;","import React from \"react\";\nimport classNames from 'classnames';\nimport PropTypes from \"prop-types\";\n\nimport ChatStore from '../../Stores/ChatStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport {openChat} from \"../../Actions/Client\";\nimport ChatTile from \"./ChatTile\";\nimport DialogTitle from \"./DialogTitle\";\nimport DialogMeta from \"./DialogMeta\";\nimport './Dialog.css';\nimport DialogContent from \"./DialogContent\";\nimport DialogBadge from \"./DialogBadge\";\n\nclass Dialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dialog = React.createRef();\n\n        const chat = ChatStore.get(this.props.chatId);\n        this.state = {\n            chat,\n            contextMenu: false,\n            left: 0,\n            top: 0\n        };\n    }\n    render() {\n\n        const {chatId} = this.props;\n        const currentChatId = ApplicationStore.getChatId();\n        const isSelected = currentChatId === chatId;\n\n        return (\n            <>\n                <div\n                    ref={this.dialog}\n                    className={classNames(isSelected ? 'dialog-active' : 'dialog', { 'item-selected': isSelected })}\n                    onMouseDown={this.handleSelect}\n                    onContextMenu={this.handleContextMenu}>\n                    <div className='dialog-wrapper'>\n                        <ChatTile chatId={chatId} />\n                        <div className='dialog-inner-wrapper'>\n                            <div className='tile-first-row'>\n                                <DialogTitle chatId={chatId} />\n                                <DialogMeta chatId={chatId} />\n                            </div>\n                            <div className='tile-second-row'>\n                                <DialogContent chatId={chatId} />\n                                <DialogBadge chatId={chatId} />\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </>\n        )\n    }\n\n    handleSelect = event => {\n        if (event.button === 0) {\n            openChat(this.props.chatId);\n        }\n    };\n\n    handleContextMenu() {\n\n    }\n}\n\nDialog.propTypes = {\n    chatId: PropTypes.number.isRequired,\n};\n\nexport default Dialog;","import IMController from '../Controllers/IMController';\n\nexport function openChat(chatId, messageId = null, popup = false) {\n    IMController.clientUpdate({\n        '@type': 'clientUpdateOpenChat',\n        chatId,\n        messageId,\n        popup\n    });\n}","import React from \"react\";\nimport Dialog from \"./Dialog\";\nimport ChatStore from \"../../Stores/ChatStore\"\nimport './DialogsList.css';\n\nclass DialogsList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.listRef = React.createRef();\n\n        this.state = {\n            chats: null,\n            fistSliceLoaded: false\n        };\n    }\n\n    componentDidMount() {\n        ChatStore.on(\"queryConv\", this.onQueryConv);\n    }\n\n\n    componentWillUnmount() {\n        ChatStore.off(\"queryConv\", this.onQueryConv);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return true\n    }\n\n    handleScroll() {\n\n    }\n\n    onQueryConv = update => {\n        const soretedItems = ChatStore.getSortedItems();\n        this.setState({chats: soretedItems}, () => this.onLoadNext(true));\n    };\n\n    render() {\n        const { chats } = this.state;\n        let dialogs = null;\n        if (chats) {\n            console.log(\"chats: \", chats);\n\n            dialogs = chats.map(x => (\n                <Dialog key={x} chatId={x} />\n            ));\n        }\n\n        return (\n            <div ref={this.listRef} className='dialogs-list' onScroll={this.handleScroll}>\n                {dialogs}\n            </div>\n        );\n    }\n\n    onLoadNext(b) {\n\n    }\n}\n\nexport default DialogsList;","import React from \"react\";\nimport classNames from 'classnames';\nimport './Dialogs.css';\nimport DialogsList from \"./DialogsList\";\n\nclass Dialogs extends React.Component {\n\n    render() {\n        return (\n            <div className={classNames('dialogs')}>\n                <div className='dialogs-content'>\n                    <DialogsList\n                        />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dialogs;","import React from \"react\";\nimport classNames from 'classnames';\nimport Dialogs from \"./Tile/Dialogs\";\n\nclass MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        return (\n            <>\n                <div\n                    className={classNames('page')}>\n                    <Dialogs />\n                </div>\n            </>\n        )\n    }\n}\n\nexport default MainPage;","import React from 'react';\nimport './App.css';\nimport MainPage from './Components/MainPage';\nimport IMController from \"./Controllers/IMController\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inactive: false,\n        }\n    }\n\n    componentWillMount() {\n        IMController.init();\n    }\n\n    componentDidMount() {\n        IMController.addListener('update', this.onUpdate)\n    }\n\n    componentWillUnmount() {\n        IMController.off('update', this.onUpdate)\n    }\n\n    onUpdate = update => {\n        console.log('update: ' +update['@type'])\n    };\n\n    render() {\n        const {inactive} = this.state;\n        let page = <MainPage />;\n        return (\n            <div id='app'>\n                {page}\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}